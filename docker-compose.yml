version: "3.9"

services:
  loki:
    image: grafana/loki:2.9.8
    container_name: loki
    command: [ "-config.file=/etc/loki/loki-config.yml" ]
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yml:/etc/loki/loki-config.yml:ro
      - ./loki:/loki
    networks:
      - observability

  promtail:
    image: grafana/promtail:2.9.8
    container_name: promtail
    command: [ "-config.file=/etc/promtail/promtail-config.yml" ]
    volumes:
      - ./promtail-config.yml:/etc/promtail/promtail-config.yml:ro
      - ./logs:/var/log/app:ro
    networks:
      - observability
    depends_on:
      - loki

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.gmail.com:587
      - GF_SMTP_USER=technotechsn@gmail.com
      - GF_SMTP_PASSWORD=yxizcpeaznjcmuho
      - GF_SMTP_FROM_ADDRESS=technotechsn@gmail.com
      - GF_SMTP_FROM_NAME=Grafana Alerts
    volumes:
      - ./grafana-provisioning/datasources:/etc/grafana/provisioning/datasources
      - grafana_data:/var/lib/grafana
    networks:
      - observability
    depends_on:
      - loki
      - tempo

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - observability

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - observability

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml:ro   # ← assure-toi que c'est bien un fichier
      - ./tempo-data:/var/tempo           # stockage local (optionnel)
    ports:
      - "3200:3200"   # HTTP query (Grafana)
      - "4317:4317"   # OTLP gRPC (Collector / apps)
      - "4318:4318"   # OTLP HTTP (Collector / apps)
      - "14268:14268" # endpoint Jaeger (optionnel)
    networks:
      - observability

  # ✅ OpenTelemetry Collector — reçoit OTLP et forward vers Tempo
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
      - ./otel-collector.yaml:/etc/otel-collector.yaml:ro
    depends_on:
      - tempo
    networks:
      - observability

  # ✅ Générateur de traces pour démo éducative (OTLP → Collector)
  telemetrygen:
    image: ghcr.io/open-telemetry/opentelemetry-collector-contrib/telemetrygen:latest
    container_name: telemetrygen
    command: [
      "traces",
      "--otlp-endpoint=otel-collector:4317",
      "--otlp-insecure=true",
      "--duration=0s",          # 0s = en continu
      "--rate=5",               # 5 traces/s
      "--services=serviceA,serviceB",
      "--span-duration=40ms"
    ]
    depends_on:
      - otel-collector
    networks:
      - observability



networks:
  observability: {}

volumes:
  grafana_data: {}
  prometheus_data: {}
  tempo_data: {}
